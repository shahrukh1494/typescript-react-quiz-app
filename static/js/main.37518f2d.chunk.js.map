{"version":3,"sources":["API.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","utils.ts","images/summer-nattu-adnan.jpg","Main.styles.ts","Main.tsx","App.tsx","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","Main","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startQuiz","EASY","newQuestions","length","undefined","e","currentTarget","answerObject","TOTAL_QUESTIONS","nextQuestion","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37518f2d.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? \"linear-gradient(90deg, #56ffa4, #59bc86)\"\r\n        : !correct && userClicked\r\n        ? \"linear-gradient(90deg, #ff5656, #c16868)\"\r\n        : \"linear-gradient(90deg, #56ccff, #6eafb4)\"};\r\n    border: 3px solid #fff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { AnswerObject } from \"../Main\";\r\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard.styles\";\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNumber: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNumber,\r\n  totalQuestions,\r\n}) => {\r\n  return (\r\n    <Wrapper>\r\n      <p className=\"number\">\r\n        Question: {questionNumber} / {totalQuestions}\r\n      </p>\r\n      <p dangerouslySetInnerHTML={{ __html: question }} />\r\n      <div>\r\n        {answers.map((answer) => (\r\n          <ButtonWrapper\r\n            key={answer}\r\n            correct={userAnswer?.correctAnswer === answer}\r\n            userClicked={userAnswer?.answer === answer}\r\n          >\r\n            <button\r\n              disabled={userAnswer ? true : false}\r\n              value={answer}\r\n              onClick={callback}\r\n            >\r\n              <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n            </button>\r\n          </ButtonWrapper>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default QuestionCard;\r\n","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n","export default __webpack_public_path__ + \"static/media/summer-nattu-adnan.c866d607.jpg\";","import styled, { createGlobalStyle } from \"styled-components\";\r\nimport BGImage from \"./images/summer-nattu-adnan.jpg\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n    height: 100%;\r\n}\r\n\r\nbody {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n    font-family: \"Catamaran\", sans-serif;\r\n}\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  > p {\r\n    color: #fff;\r\n  }\r\n\r\n  .score {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-family: Fascinate Inline, Haettenschweiler, \"Arial Narrow Bold\",\r\n      sans-serif;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    font-weight: 400;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n\r\n  .start,\r\n  .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #fff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n\r\n  .start {\r\n    ma-width: 200px;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport QuestionCard from \"./components/QuestionCard\";\r\nimport { QuestionState, Difficulty, fetchQuizQuestions } from \"./API\";\r\nimport { GlobalStyle, Wrapper } from \"./Main.styles\";\r\n\r\nexport type AnswerObject = {\r\n  question: string;\r\n  answer: string;\r\n  correct: boolean;\r\n  correctAnswer: string;\r\n};\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\n\r\nfunction Main() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\r\n  const [number, setNumber] = useState(0);\r\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\r\n  const [score, setScore] = useState(0);\r\n  const [gameOver, setGameOver] = useState(true);\r\n\r\n  const startQuiz = async () => {\r\n    setLoading(true);\r\n    setGameOver(false);\r\n\r\n    const newQuestions = await fetchQuizQuestions(\r\n      TOTAL_QUESTIONS,\r\n      Difficulty.EASY\r\n    );\r\n\r\n    setQuestions(newQuestions);\r\n    setScore(0);\r\n    setUserAnswers([]);\r\n    setNumber(0);\r\n    setLoading(false);\r\n  };\r\n\r\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if (!gameOver) {\r\n      const answer = e.currentTarget.value;\r\n      const correct = questions[number].correct_answer === answer;\r\n      if (correct) {\r\n        setScore(score + 1);\r\n      }\r\n\r\n      const answerObject = {\r\n        question: questions[number].question,\r\n        answer,\r\n        correct,\r\n        correctAnswer: questions[number].correct_answer,\r\n      };\r\n      setUserAnswers([...userAnswers, answerObject]);\r\n    }\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    const nextQuestion = number + 1;\r\n\r\n    if (nextQuestion === TOTAL_QUESTIONS) {\r\n      setGameOver(true);\r\n    } else {\r\n      setNumber(nextQuestion);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Wrapper>\r\n        <h1>REACT QUIZ</h1>\r\n        {(gameOver || userAnswers.length === TOTAL_QUESTIONS) && (\r\n          <button className=\"start\" onClick={startQuiz}>\r\n            Start\r\n          </button>\r\n        )}\r\n        {!gameOver && <p className=\"score\">Score: {score}</p>}\r\n        {loading && <p>Loading Questions ...</p>}\r\n        {!loading && !gameOver && (\r\n          <QuestionCard\r\n            questionNumber={number + 1}\r\n            totalQuestions={TOTAL_QUESTIONS}\r\n            question={questions[number].question}\r\n            answers={questions[number].answers}\r\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\r\n            callback={checkAnswer}\r\n          />\r\n        )}\r\n        {!gameOver &&\r\n          !loading &&\r\n          userAnswers.length === number + 1 &&\r\n          number !== TOTAL_QUESTIONS - 1 && (\r\n            <button className=\"next\" onClick={nextQuestion}>\r\n              Next Question\r\n            </button>\r\n          )}\r\n      </Wrapper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import Main from \"./Main\";\n\nconst App = () => {\n  return (\n    <div>\n      <Main />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}